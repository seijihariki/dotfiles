#!/usr/bin/python3
import signal
import subprocess
import sys
import os

token_file = os.path.expanduser('~/.config/telegram_notify_token')

# Import telegram libs and install them if not installed
try:
    from telegram.ext import Updater
    from telegram.ext import CommandHandler
except ImportError:
    print ("It seems python-telegram-bot is not installed...")
    q = "Install for current user? [y/N] "
    res = None
    while True:
        res = input(q).lower().strip()
        if len(res) == 0:
            res = 'n'
        res = res[0]
        if res == 'y' or res == 'n':
            res = res == 'y'
            break

    if res:
        print ("Running 'pip3 install --user python-telegram-bot'...")
        code = subprocess.Popen('pip3 install --user python-telegram-bot',
                shell=True,
                executable='/bin/bash').wait()
        if code != 0:
            print ("Failed installing!")
            sys.exit(-1)

        print ("Installed successfuly!")
    else:
        sys.exit(0)

# Telegram bot token
token = ''
with open(token_file) as f:
    token = f.readline().strip('\n')

# Parse args
if len(sys.argv) < 2:
    print ("Usage: {} <command>".format(sys.argv[0]))
    sys.exit(0)

cmd = ' '.join(sys.argv[1:])

print ("Running command '{}'. Will notify when the program ends!".format(cmd))

# Start bot server
updater = Updater(token=token)
dispatcher = updater.dispatcher

# Handle system messages
def sigint(signal, frame):
    for chat in chat_id:
        updater.bot.send_message(chat_id=chat,
                text="Job '{}' was cancelled!".format(cmd))

signal.signal(signal.SIGINT, sigint)

# Handle commands
chat_id = []
def link(bot, update):
    if update.message.chat_id in chat_id:
        return
    chat_id.append(update.message.chat_id)
    print ("Will notify '{} {}' when job is over!".
            format(update.message.from_user.first_name,
                update.message.from_user.last_name))
    bot.send_message(chat_id=chat_id[-1],
            text="Will notify you when job '{}' ends!".format(cmd))

# Define commands
link_handler = CommandHandler('link', link)
dispatcher.add_handler(link_handler)

# Start server
updater.start_polling()

# Start process
code = subprocess.Popen(cmd, shell=True, executable='/bin/bash').wait()

# Notify everyone
for chat in chat_id:
    updater.bot.send_message(chat_id=chat,
            text="Job '{}' ended with code {:d}".format(cmd, code))

# Stop server
updater.stop()
